generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model absence {
  id_absence         String    @id(map: "pk_absence") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee        String    @db.Uuid
  date_absence       DateTime  @db.Date
  reason_absence     String    @db.VarChar(50)
  absence_created_at DateTime  @default(now()) @db.Timestamp(6)
  absence_updated_at DateTime? @default(now()) @db.Timestamp(6)
  employee           employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_absence_employee")
}

model address {
  id_address         String    @id(map: "pk_address") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_street          String    @db.Uuid
  street_number      Int
  door               String?   @db.VarChar(4)
  address_created_at DateTime  @default(now()) @db.Timestamp(6)
  address_updated_at DateTime? @default(now()) @db.Timestamp(6)
  street             street    @relation(fields: [id_street], references: [id_street], onDelete: NoAction, onUpdate: NoAction, map: "fk_address_street")
  person             person[]
}

model area {
  id_area  String     @id(map: "pk_area") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  area     String     @unique @db.VarChar(20)
  employee employee[]
}

model employee {
  id_employee         String             @id(map: "pk_employee") @unique(map: "unq_id_employee") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_person           String             @db.Uuid
  id_status           String             @db.Uuid
  id_area             String             @db.Uuid
  no_file             Int                @unique
  email               String             @unique @db.VarChar(75)
  employment_date     DateTime           @db.Date
  termination_date    DateTime?          @db.Date
  position            String             @db.VarChar(100)
  working_hours       Int?               @default(0)
  picture_url         String             @db.VarChar(300)
  employee_created_at DateTime           @default(now()) @db.Timestamp(6)
  employee_updated_at DateTime?          @default(now()) @db.Timestamp(6)
  absence             absence[]
  area                area               @relation(fields: [id_area], references: [id_area], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_area")
  person              person             @relation(fields: [id_person], references: [id_person], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_person")
  employee_status     employee_status    @relation(fields: [id_status], references: [id_status], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_status")
  employee_doc        employee_doc[]
  employee_history    employee_history[]
  extra_hours         extra_hours[]
  formal_warning      formal_warning[]
  late_arrival        late_arrival[]
  license             license[]
  training            training[]
  user                user[]
  vacation            vacation[]
}

model employee_doc {
  id_employee_doc         String    @id(map: "pk_employee_doc") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee             String    @db.Uuid
  employee_doc_url        String    @db.VarChar(250)
  employee_doc_name       String    @db.VarChar(50)
  employee_doc_created_at DateTime  @default(now()) @db.Timestamp(6)
  employee_doc_updated_at DateTime? @default(now()) @db.Timestamp(6)
  employee                employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_doc_employee")
}

model employee_history {
  id_history           String   @id(map: "pk_employee_history") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee          String   @db.Uuid
  id_modifying_user    String   @db.Uuid
  modified_field       String   @db.VarChar(30)
  modified_field_label String   @db.VarChar(50)
  previous_value       Json?
  current_value        Json?
  modification_date    DateTime @default(now()) @db.Timestamp(6)
  employee             employee @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_history_employee")
  user                 user     @relation(fields: [id_modifying_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_employee_history_user")
}

model employee_status {
  id_status    String     @id(map: "pk_employee_status") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  title_status String     @unique @db.VarChar(10)
  employee     employee[]
}

model extra_hours {
  id_extra_hours          String    @id(map: "pk_extra_hours") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee             String    @db.Uuid
  date_extra_hours        DateTime  @db.Date
  qty_extra_hours         Int
  observation_extra_hours String?   @db.VarChar(200)
  extra_hours_created_at  DateTime  @default(now()) @db.Timestamp(6)
  extra_hours_updated_at  DateTime? @default(now()) @db.Timestamp(6)
  employee                employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_extra_hours_employee")
}

model family {
  id_family            String   @id(map: "pk_family") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_relationship_type String   @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  person               person[]
}

model family_relationship_type {
  id_family_relationship_type String @id(map: "pk_family_relationship_type") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  relationship_type           String @db.VarChar(20)
}

model formal_warning {
  id_formal_warning         String    @id(map: "pk_formal_warning") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee               String    @db.Uuid
  reason_formal_warning     String    @db.VarChar(200)
  date_formal_warning       DateTime  @db.Date
  formal_warning_created_at DateTime  @default(now()) @db.Timestamp(6)
  formal_warning_updated_at DateTime? @default(now()) @db.Timestamp(6)
  employee                  employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_formal_warning_employee")
}

model gender {
  id_gender String   @id(map: "pk_gender") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  gender    String   @unique @db.VarChar(15)
  person    person[]
}

model late_arrival {
  id_late_arrival          String    @id(map: "pk_late_arrival") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee              String    @db.Uuid
  date_late_arrival        DateTime  @db.Date
  time_late_arrival        String    @db.Char(5)
  observation_late_arrival String?   @db.VarChar(200)
  late_arrival_created_at  DateTime  @default(now()) @db.Timestamp(6)
  late_arrival_updated_at  DateTime? @default(now()) @db.Timestamp(6)
  employee                 employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_late_arrival_employee")
}

model license {
  id_license          String       @id(map: "pk_license") @unique(map: "unq_id_license") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_license_type     String       @db.Uuid
  id_employee         String       @db.Uuid
  start_date_license  DateTime     @db.Date
  end_date_license    DateTime     @db.Date
  observation_license String?      @db.VarChar(200)
  license_created_at  DateTime     @default(now()) @db.Timestamp(6)
  license_updated_at  DateTime?    @default(now()) @db.Timestamp(6)
  employee            employee     @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_license_employee")
  license_type        license_type @relation(fields: [id_license_type], references: [id_license_type], onDelete: NoAction, onUpdate: NoAction, map: "fk_license_type")
}

model license_type {
  id_license_type     String    @id(map: "pk_license_type") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  title_license       String    @unique @db.VarChar(30)
  description_license String    @db.VarChar(100)
  license_isactive    Boolean   @default(true)
  license             license[]
}

model locality {
  id_locality     String   @id(map: "pk_localidad") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_province     String   @db.Uuid
  locality_api_id String   @unique @db.VarChar(20)
  locality        String   @unique @db.VarChar(30)
  province        province @relation(fields: [id_province], references: [id_province], onDelete: NoAction, onUpdate: NoAction, map: "fk_locality_province")
  street          street[]
}

model login {
  id_log         String   @id(map: "pk_login") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_user        String   @db.Uuid
  ip_address     String   @db.VarChar(15)
  user_agent     String   @db.VarChar(150)
  log_created_at DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [id_user], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_login_user")
}

model notification {
  id_notification                     String             @id(map: "pk_notification") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_notification_type                String             @db.Uuid
  id_sender                           String             @db.Uuid
  id_receptor                         String             @db.Uuid
  message                             String             @db.VarChar(500)
  read_status                         Boolean
  notification_created_at             DateTime           @default(now()) @db.Timestamp(6)
  notification_updated_at             DateTime?          @default(now()) @db.Timestamp(6)
  user_notification_id_receptorTouser user               @relation("notification_id_receptorTouser", fields: [id_receptor], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_receptor")
  user_notification_id_senderTouser   user               @relation("notification_id_senderTouser", fields: [id_sender], references: [id_user], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_sender")
  notification_type                   notification_type  @relation(fields: [id_notification_type], references: [id_notification_type], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_type")
  notification_doc                    notification_doc[]
}

model notification_doc {
  id_notification_doc         String       @id(map: "pk_notification_doc") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_notification             String       @db.Uuid
  notification_doc_url        String       @db.VarChar(250)
  notification_doc_name       String       @db.VarChar(50)
  notification_doc_created_at DateTime     @default(now()) @db.Timestamp(6)
  notification_doc_updated_at DateTime?    @default(now()) @db.Timestamp(6)
  notification                notification @relation(fields: [id_notification], references: [id_notification], onDelete: NoAction, onUpdate: NoAction, map: "fk_notification_doc_notification")
}

model notification_type {
  id_notification_type  String         @id(map: "pk_notification_type") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  title_notification    String         @db.VarChar(100)
  start_hour            String         @db.Char(5)
  end_hour              String         @db.Char(5)
  allowed_roles         String         @db.VarChar(200)
  notification_isactive Boolean        @default(true)
  notification          notification[]
}

model person {
  id_person             String        @id(map: "pk_person") @unique(map: "unq_id_person") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_gender             String        @db.Uuid
  id_family             String?       @db.Uuid
  id_address            String?       @db.Uuid
  id_phone              String?       @db.Uuid
  name                  String        @db.VarChar(50)
  surname               String        @db.VarChar(50)
  birth_date            DateTime      @db.Date
  identification_number String        @unique @db.VarChar(8)
  person_created_at     DateTime      @default(now()) @db.Timestamp(6)
  person_updated_at     DateTime?     @default(now()) @db.Timestamp(6)
  employee              employee[]
  address               address?      @relation(fields: [id_address], references: [id_address], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_address")
  family                family?       @relation(fields: [id_family], references: [id_family], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_family")
  gender                gender        @relation(fields: [id_gender], references: [id_gender], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_gender")
  phone                 phone?        @relation(fields: [id_phone], references: [id_phone], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_phone")
  third_party           third_party[]
}

model phone {
  id_phone         String    @id(map: "pk_phone") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  phone_no         String    @unique @db.VarChar(13)
  phone_created_at DateTime  @default(now()) @db.Timestamp(6)
  phone_updated_at DateTime? @default(now()) @db.Timestamp(6)
  person           person[]
}

model province {
  id_province     String     @id(map: "pk_province") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  province_api_id String     @unique @db.VarChar(20)
  province        String     @unique @db.VarChar(50)
  locality        locality[]
}

model street {
  id_street     String    @id(map: "pk_street") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_locality   String    @db.Uuid
  street_api_id String    @unique @db.VarChar(20)
  street        String    @unique @db.VarChar(75)
  address       address[]
  locality      locality  @relation(fields: [id_locality], references: [id_locality], onDelete: NoAction, onUpdate: NoAction, map: "fk_street_locality")
}

model third_party {
  id_third_party   String @id(map: "pk") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_person        String @db.Uuid
  role_description String @db.VarChar(20)
  email            String @unique @db.VarChar(75)
  person           person @relation(fields: [id_person], references: [id_person], onDelete: NoAction, onUpdate: NoAction, map: "fk_third_party_person")
  user             user[]
}

model training {
  id_training          String        @id(map: "pk_training") @unique(map: "unq_id_training") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_training_type     String        @db.Uuid
  id_employee          String        @db.Uuid
  date_training        DateTime      @db.Date
  reason_training      String?       @db.VarChar(200)
  observation_training String?       @db.VarChar(200)
  training_created_at  DateTime      @default(now()) @db.Timestamp(6)
  training_updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  employee             employee      @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_training_employee")
  training_type        training_type @relation(fields: [id_training_type], references: [id_training_type], onDelete: NoAction, onUpdate: NoAction, map: "fk_training_type")
}

model training_type {
  id_training_type          String     @id(map: "pk_id_training_type") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  title_training_type       String     @unique @db.VarChar(30)
  description_training_type String     @db.VarChar(100)
  training_isactive         Boolean    @default(true)
  training                  training[]
}

model user {
  id_user                                     String             @id(map: "pk_user") @unique(map: "unq_id_user") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_user_type                                String             @db.Uuid
  id_employee                                 String?            @db.Uuid
  id_third_party                              String?            @db.Uuid
  username                                    String             @unique @db.VarChar(8)
  password                                    String             @db.VarChar(100)
  user_isactive                               Boolean            @default(true)
  user_created_at                             DateTime           @default(now()) @db.Timestamp(6)
  user_updated_at                             DateTime?          @default(now()) @db.Timestamp(6)
  has_changed_def_pass                        Boolean            @default(false)
  employee_history                            employee_history[]
  login                                       login[]
  notification_notification_id_receptorTouser notification[]     @relation("notification_id_receptorTouser")
  notification_notification_id_senderTouser   notification[]     @relation("notification_id_senderTouser")
  employee                                    employee?          @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_employee")
  third_party                                 third_party?       @relation(fields: [id_third_party], references: [id_third_party], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_third_party")
  user_type                                   user_type          @relation(fields: [id_user_type], references: [id_user_type], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_type")
}

model user_type {
  id_user_type String @id(map: "pk_user_type") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  user_type    String @unique @db.VarChar(15)
  user         user[]
}

model vacation {
  id_vacation          String    @id(map: "pk_vacation") @default(dbgenerated("uuid_generate_v7()")) @db.Uuid
  id_employee          String    @db.Uuid
  start_date_vacation  DateTime  @db.Date
  end_date_vacation    DateTime  @db.Date
  observation_vacation String?   @db.VarChar(200)
  vacation_created_at  DateTime  @default(now()) @db.Timestamp(6)
  vacation_updated_at  DateTime? @default(now()) @db.Timestamp(6)
  employee             employee  @relation(fields: [id_employee], references: [id_employee], onDelete: NoAction, onUpdate: NoAction, map: "fk_vacations_employee")
}
