import express from 'express';

import { isAuthenticated } from '../../middlewares/isAuthenticated.js';
import { isAdmin } from '../../middlewares/isAdmin.js';
import { isAdminOrReadOnly } from '../../middlewares/isAdminOrReadOnly.js';

import { Employees } from '../../controllers/employees/index.js';

import { upload } from '../../helpers/multer.js';

export const employeeRouter = express.Router();

// Faltan: licensesTypes, trainingTypes,

// GET ---------------------------
employeeRouter.get(
  '/',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employees,
);
employeeRouter.get(
  '/:employeeId',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeById,
);
employeeRouter.get(
  '/:employeeId/docs',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeDocs,
);
employeeRouter.get(
  '/:employeeId/history',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeHistory,
);
employeeRouter.get(
  '/:employeeId/absences',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeAbsences,
);
employeeRouter.get(
  '/:employeeId/licenses',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeLicenses,
);
employeeRouter.get(
  '/:employeeId/vacations',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeVacations,
);
employeeRouter.get(
  '/:employeeId/trainings',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeTrainings,
);
employeeRouter.get(
  '/:employeeId/formal-warnings',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeFormalWarnings,
);
employeeRouter.get(
  '/:employeeId/late-arrivals',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeLateArrivals,
);
employeeRouter.get(
  '/:employeeId/extra-hours',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.employeeExtraHours,
);
employeeRouter.get(
  '/licenses/types',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.licensesTypes,
);
employeeRouter.get(
  '/licenses/types/:licenseTypeId',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.licensesTypesById,
);
employeeRouter.get(
  '/trainings/types',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.trainingsTypes,
);
employeeRouter.get(
  '/trainings/types/:trainingTypeId',
  isAuthenticated,
  isAdminOrReadOnly,
  Employees.GetController.trainingsTypesById,
);

// POST ---------------------------
employeeRouter.post(
  '/',
  isAuthenticated,
  isAdmin,
  upload.single('imgFile'),
  Employees.PostController.createEmployee,
);
employeeRouter.post(
  '/:employeeId/docs',
  isAuthenticated,
  isAdmin,
  upload.single('file'),
  Employees.PostController.createEmployeeDoc,
);
employeeRouter.post(
  '/:employeeId/absences',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeAbsence,
);
employeeRouter.post(
  '/:employeeId/licenses',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeLicense,
);
employeeRouter.post(
  '/:employeeId/vacations',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeVacation,
);
employeeRouter.post(
  '/:employeeId/trainings',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeTraining,
);
employeeRouter.post(
  '/:employeeId/formal-warnings',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeFormalWarning,
);
employeeRouter.post(
  '/:employeeId/late-arrivals',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeLateArrival,
);
employeeRouter.post(
  '/:employeeId/extra-hours',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createEmployeeExtraHour,
);
employeeRouter.post(
  '/licenses/types',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createLicenseType,
);
employeeRouter.post(
  '/trainings/types',
  isAuthenticated,
  isAdmin,
  Employees.PostController.createTrainingType,
);

// PUT ----------------------------
employeeRouter.put(
  '/:employeeId',
  isAuthenticated,
  isAdmin,
  Employees.PutController.updateEmployee,
);
employeeRouter.put(
  '/:employeeId/image',
  isAuthenticated,
  isAdmin,
  upload.single('imgFile'),
  Employees.PutController.updateEmployeeImage,
);
employeeRouter.put(
  '/:employeeId/docs/:docId',
  isAuthenticated,
  isAdmin,
  Employees.PutController.updateEmployeeDoc,
);
employeeRouter.put(
  '/licenses/types/:licenseTypeId',
  isAuthenticated,
  isAdmin,
  Employees.PutController.updateLicenseType,
);
employeeRouter.put(
  '/trainings/types/:trainingTypeId',
  isAuthenticated,
  isAdmin,
  Employees.PutController.updateTrainingType,
);

// DELETE -------------------------
employeeRouter.delete(
  '/:employeeId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteEmployee,
);
employeeRouter.delete(
  '/:employeeId/docs/:docId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteEmployeeDoc,
);
employeeRouter.delete(
  '/:employeeId/licenses/:licenseId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteEmployeeLicense,
);
employeeRouter.delete(
  '/:employeeId/vacations/:vacationId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteEmployeeVacation,
);
employeeRouter.delete(
  '/licenses/types/:licenseTypeId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteLicenseType,
);
employeeRouter.delete(
  '/trainings/types/:trainingTypeId',
  isAuthenticated,
  isAdmin,
  Employees.DeleteController.deleteTrainingType,
);
